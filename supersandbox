#!/bin/bash

# path for final wrapper scripts
MYBINPATH="/usr/local/bin"

# location for virtualenvs
MYENVPATH="/usr/local/virtualenvs"

# is sudo required to write to the above directories?
DOISUDO="yes"

# name of the virtualenv
MYINSTALLPATH="${MYENVPATH}/supernova"

# direct links
HELPERADDON="https://github.com/cgtx/supernova-keyring-helper/archive/v0.4.tar.gz"

# text formatting
_und=$(tput sgr 0 1) # underline
_bld=$(tput bold)    # bold
_red=$(tput setaf 1) # red
_gre=$(tput setaf 2) # green
_res=$(tput sgr0)    # reset


pass() {
	# print a bold green check
	PASS='\xE2\x9C\x94'
	echo -e "${_bld}${_gre}${PASS}${_res}"
}


fail() {
	soft_fail "${@}"
	exit 1
}


soft_fail() {
	# print a bold red x, any additional text, and quit the script
	FAIL='\xE2\x9C\x98'
	echo -e "${_bld}${_red}${FAIL}${_res}"
	if [[ -n "${1}" ]]; then
		echo -e "${_bld}${1}${_res}"
	fi
}


set_variables() {
	# set the sudo variable
	if [[ ${DOISUDO} == "yes" ]]; then
		SUDO="sudo"
	else
		SUDO=""
	fi

	# OS detection
	if [[ -f /etc/os-release ]]; then
		eval $(grep ^ID= /etc/os-release)
		# works on ubuntu, debian, arch, fedora
	elif [[ -f /etc/redhat-release ]]; then
		if [[ -f /etc/fedora-release ]]; then
			ID="fedora"
		elif [[ -f /etc/centos-release ]]; then
			ID="centos"
		else
			ID="redhat"
		fi
	elif [[ -x /usr/bin/sw_vers ]]; then
		ID="osx"
	fi

	# set variables based on OS
	if [[ "${ID}" == "arch" ]]; then
		PYTHON="python2"
		VIRTUALENV="virtualenv2"
		TESTCMD="pacman -Q"
	elif [[ "${ID}" == "debian" ]]; then
		PYTHON="python"
		PYTHONDEV="python-dev"
		VIRTUALENV="virtualenv"
		TESTCMD="dpkg -s"
	elif [[ "${ID}" == "ubuntu" ]]; then
		PYTHON="python"
		PYTHONDEV="python-dev"
		VIRTUALENV="virtualenv"
		TESTCMD="dpkg -s"
	elif [[ "${ID}" == "fedora" ]]; then
		PYTHON="python"
		PYTHONDEV="python-devel"
		VIRTUALENV="virtualenv"
		TESTCMD="rpm -q"
	elif [[ "${ID}" == "centos" ]]; then
		PYTHON="python27"
		PYTHONDEV="python27-devel"
		VIRTUALENV="virtualenv-2.7"
		TESTCMD="rpm -q"
	elif [[ "${ID}" == "redhat" ]]; then
		PYTHON="python27"
		PYTHONDEV="python27-devel"
		VIRTUALENV="virtualenv-2.7"
		TESTCMD="rpm -q"
	# elif [[ "${ID}" == "osx" ]]; then
	# 	PYTHON=""    		# [[ -d /usr/local/Cellar/python/ ]]
	# 	VIRTUALENV=""
	# 	TESTCMD=""
	else
		fail "unrecognized OS: ${ID}"
	fi
}


pkg_test() {
	# test if packages are installed
	for pkg in ${PYTHON} ${PYTHONDEV} ${PYTHON}-virtualenv gcc; do
		if [[ -n ${pkg} ]]; then
			echo -n "checking for ${pkg} package..."
			if ${TESTCMD} ${pkg} &> /dev/null; then
				pass
			else
				fail "install ${pkg} and try again"
			fi
		fi
	done
}


do_template() {
	# create config file template
	echo -n "creating configuration template file ~/.supernova.sample ..."
	cat <<- EOF | tee ~/.supernova.sample &> /dev/null
	[mine]
	OS_AUTH_SYSTEM=rackspace
	OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
	OS_TENANT_NAME=USE_KEYRING
	OS_PROJECT_ID=USE_KEYRING
	OS_USERNAME=USE_KEYRING
	OS_PASSWORD=USE_KEYRING
	OS_REGION_NAME=USE_KEYRING
	NOVA_RAX_AUTH=1
	EOF
	pass
}


do_install() {
	# test if packages are installed
	pkg_test

	# test if there already is scripts in our desired location
	echo -n "checking for wrapper script conflict..."
	for each in nova supernova supernova-keyring supernova-keyring-helper; do
		if [[ -f ${MYBINPATH}/${each} ]]; then
			fail "${MYBINPATH}/${each} already exists"
		fi
	done
	pass

	# test for directories, create if needed
	echo -n "checking for directory ${MYBINPATH}..."
	if [[ -d ${MYBINPATH} ]]; then
		pass
	else
		echo -n "creating..."
		${SUDO} mkdir -p ${MYBINPATH} || fail
		pass
	fi
	echo -n "checking for directory ${MYENVPATH}..."
	if [[ -d ${MYENVPATH} ]]; then
		pass
	else
		echo -n "creating..."
		${SUDO} mkdir -p ${MYENVPATH} || fail
		pass
	fi

	# create isolated python environment
	echo -n "creating isolated python environment ${MYINSTALLPATH}..."
	${SUDO} ${VIRTUALENV} --no-site-packages ${MYINSTALLPATH} &> /dev/null && pass || fail

	# activate the virtual environment
	echo -n "activating virutalenv ${MYINSTALLPATH}..."
	. ${MYINSTALLPATH}/bin/activate &> /dev/null && pass || fail "could not activate ${MYINSTALLPATH}"

	# install pip packages
	echo -n "installing pbr..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install pbr &> /dev/null && pass || fail
	echo -n "installing python-novaclient..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install python-novaclient &> /dev/null && pass || fail
	echo -n "installing rackspace-novaclient..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install rackspace-novaclient &> /dev/null && pass || fail
	echo -n "installing supernova..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install supernova &> /dev/null && pass || fail
	echo -n "installing supernova-keyring-helper..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install ${HELPERADDON} &> /dev/null && pass || fail
	echo -n "saving pip freeze output..."
	${SUDO} ${MYINSTALLPATH}/bin/pip freeze 2>&1 | ${SUDO} tee ${MYINSTALLPATH}/freeze.$(date +%F_%T).out &> /dev/null && pass || fail

	# deactivate the virtual environment
	echo -n "deactivating virutalenv ${MYINSTALLPATH}..."
	deactivate &> /dev/null && pass || fail "could not deactivate ${MYINSTALLPATH}"

	# create wrapper scripts
	echo -n "creating wrapper scripts..."
	for each in nova supernova supernova-keyring supernova-keyring-helper; do
		cat <<- EOF | ${SUDO} tee ${MYBINPATH}/${each} &> /dev/null
		#!/bin/bash
		. ${MYINSTALLPATH}/bin/activate
		${MYINSTALLPATH}/bin/${each} \${@}
		EOF
		${SUDO} chmod +x ${MYBINPATH}/${each}
	done
	pass

	# create config file template
	do_template

	echo "${_bld}installation complete${_res}"
}


do_upgrade() {
	# test if packages are installed
	pkg_test

	# activate the virtual environment
	echo -n "activating virutalenv ${MYINSTALLPATH}..."
	. ${MYINSTALLPATH}/bin/activate &> /dev/null && pass || fail "could not activate ${MYINSTALLPATH}"

	# upgrade pip packages
	echo -n "updating pbr..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install --upgrade pbr &> /dev/null && pass || fail
	echo -n "updating python-novaclient..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install --upgrade python-novaclient &> /dev/null && pass || fail
	echo -n "updating rackspace-novaclient..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install --upgrade rackspace-novaclient &> /dev/null && pass || fail
	echo -n "updating supernova..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install --upgrade supernova &> /dev/null && pass || fail
	echo -n "updating supernova-keyring-helper..."
	${SUDO} ${MYINSTALLPATH}/bin/pip install --upgrade ${HELPERADDON} &> /dev/null && pass || fail
	echo -n "saving pip freeze output..."
	${SUDO} ${MYINSTALLPATH}/bin/pip freeze 2>&1 | ${SUDO} tee ${MYINSTALLPATH}/freeze.$(date +%s).out &> /dev/null && pass || fail

	# deactivate the virtual environment
	echo -n "deactivating virutalenv ${MYINSTALLPATH}..."
	deactivate &> /dev/null && pass || fail "could not deactivate ${MYINSTALLPATH}"

	echo "${_bld}upgrade process complete${_res}"
}


do_remove() {
	# remove installation path
	if [[ -d ${MYINSTALLPATH} ]]; then
		echo -n "remove virtualenv directory ${_bld}${MYINSTALLPATH}${_res}? [y/N] "; read x
		if [[ "${x}" == "y" ]]; then
			echo -n "removing virtualenv directory..."
			${SUDO} rm -rf ${MYINSTALLPATH} && pass || fail
		fi
	fi

	# delete wrapper scripts
	for each in nova supernova supernova-keyring supernova-keyring-helper; do
		if [[ -f ${MYBINPATH}/${each} ]]; then
			echo -n "remove wrapper script ${_bld}${MYBINPATH}/${each}${_res}? [y/N] "; read x
			if [[ "${x}" == "y" ]]; then
				echo -n "removing wrapper script..."
				${SUDO} rm -f ${MYBINPATH}/${each} && pass || fail
			fi
		fi
	done

	# remove config file template
	if [[ -f ~/.supernova.sample ]]; then
		echo -n "remove configuration template file ${_bld}~/.supernova.sample${_res}? [y/N] "; read x
		if [[ "${x}" == "y" ]]; then
			echo -n "removing configuration template file..."
			rm -f ~/.supernova.sample && pass || fail
		fi
	fi

	echo "${_bld}uninstall complete${_res}"
}


do_status() {
	# show executables
	for each in nova supernova supernova-keyring supernova-keyring-helper; do
		echo -n "testing executable ${MYBINPATH}/${each}..."
		if [[ -x ${MYBINPATH}/${each} ]]; then
			pass
		else
			soft_fail
		fi
	done
	# show virtualenvs
	echo -n "testing directory ${MYINSTALLPATH}..."
	if [[ -d ${MYINSTALLPATH} ]]; then
		pass
	else
		soft_fail
	fi
}


do_help() {
	DESC="${_bld}description${_res}"
	USAGE="${_bld}usage${_res}"
	SUBCOMMAND="${_und}subcommand${_res}"
	SUBCOMMANDS="${_bld}subcommands${_res}"
	NAME=$(basename ${0})
	echo -e "${USAGE}:\t\t${NAME} ${SUBCOMMAND}\n"
	echo -e "${DESC}:\tBootstrap a complete supernova environment using virtualenv.\n"
	echo -e "${SUBCOMMANDS}:\tinstall \tinstall the environment and wrapper scripts"
	echo -e "\t\tupgrade  \tupgrade the pip pacakges in the environment"
	echo -e "\t\tremove   \tremove the environment and wrapper scripts"
	echo -e "\t\ttemplate \tcreate configuration template file"
	echo -e "\t\tstatus   \tcheck the status of your installation"
	exit 1
}


# start main program

if [[ ${#} -ne 1 ]]; then
	do_help
fi

set_variables

case ${1} in
	"install")			do_install;;
	"upgrade"|"update")		do_upgrade;;
	"remove"|"erase"|"purge")	do_remove;;
	"template")			do_template;;
	"status")			do_status;;
	*)				do_help;;
esac

# vim: set syntax=sh sw=8 ts=8 :
