#!/bin/bash

# text formatting
_und=$(tput sgr 0 1) # underline
_bld=$(tput bold)    # bold
_red=$(tput setaf 1) # red
_gre=$(tput setaf 2) # green
_res=$(tput sgr0)    # reset

# https://github.com/cgtx/supernova-keyring-helper
# change to 1 to enable
WITH_KEYRING_HELPER=0

pass() {
	# print a bold green check
	PASS="\xE2\x9C\x94"
	echo -e "${_bld}${_gre}${PASS}${_res}"
}


fail() {
	soft_fail "${@}"
	exit 1
}


soft_fail() {
	# print a bold red x, any additional text, and quit the script
	FAIL="\xE2\x9C\x98"
	echo -e "${_bld}${_red}${FAIL}${_res}"
	if [[ -n "${1}" ]]; then
		echo -e "${_bld}${1}${_res}"
	fi
}


set_variables() {
	# set distro ID
	if [[ -f /etc/os-release ]]; then
		eval $(grep ^ID= /etc/os-release)
		# works on ubuntu, debian, arch, fedora
	elif [[ -f /etc/redhat-release ]]; then
		if [[ -f /etc/centos-release ]]; then
			ID="centos"
		else
			ID="redhat"
		fi
	elif [[ -x /usr/bin/sw_vers ]]; then
		ID="osx"
	fi

	# set variables based on ID
	PKGS=(gcc)
	case "${ID}" in
		"arch")
			PKGS+=(python2 python2-virtualenv)
			VIRTUALENV="virtualenv2"
			TESTCMD="pacman -Q"
			;;
		"ubuntu"|"debian")
			PKGS+=(python python-dev python-virtualenv)
			VIRTUALENV="virtualenv"
			TESTCMD="dpkg -s"
			;;
		"fedora")
			PKGS+=(python python-devel python-virtualenv)
			VIRTUALENV="virtualenv"
			TESTCMD="rpm -q"
			;;
		"centos"|"redhat")
			PKGS+=(python27 python27-devel python27-virtualenv)
			VIRTUALENV="virtualenv-2.7"
			TESTCMD="rpm -q"
			;;
		"osx")
			VIRTUALENV="virtualenv"
			;;
		*)
			fail "unrecognized OS: ${ID}"
			;;
	esac

	# https://wiki.gnome.org/Initiatives/GnomeGoals/XDGConfigFolders
	DATA_HOME=${XDG_DATA_HOME:-${HOME}/.local/share}

	# various paths
	BIN_PATH="${DATA_HOME}/bin" 		# path for wrapper scripts
	ENV_PATH="${DATA_HOME}/virtualenv" 	# parent directory of the virtualenv
	INSTALL_PATH="${ENV_PATH}/supernova" 	# full path of the virtualenv

	# define our wrapper scripts
	SCRIPTS=(nova supernova supernova-keyring)

	# optional keyring helper stuff
	if [[ ${WITH_KEYRING_HELPER} -eq 1 ]]; then
		HELPER_ADD_ON="https://github.com/cgtx/supernova-keyring-helper/archive/v0.4.tar.gz"
		SCRIPTS+=(supernova-keyring-helper)
	fi

}


do_checks() {
	# checks for BIN_PATH
	echo -n "checking for directory ${BIN_PATH}..."
	if [[ -d ${BIN_PATH} ]]; then
		pass
	else
		echo -n "creating..."
		mkdir -p ${BIN_PATH} || fail
		pass
	fi
	echo -n "checking for ${BIN_PATH} in PATH..."
	if [[ ":${PATH}:" == *":${BIN_PATH}:"* ]]; then
		pass
	else
		fail
	fi

	# checks for ENV_PATH
	echo -n "checking for directory ${ENV_PATH}..."
	if [[ -d ${ENV_PATH} ]]; then
		pass
	else
		echo -n "creating..."
		mkdir -p ${ENV_PATH} || fail
		pass
	fi
}


pkg_test() {
	# test if packages are installed
	if [[ ${ID} == "osx" ]]; then
		if ! which ${VIRTUALENV} &> /dev/null; then
			fail "unable to find virtualenv in your PATH\n\nhttp://docs.python-guide.org/en/latest/starting/install/osx/"
		fi
	else
		for PKG in ${PKGS[@]}; do
			if [[ -n ${PKG} ]]; then
				echo -n "checking for ${PKG} package..."
				if ${TESTCMD} ${PKG} &> /dev/null; then
					pass
				else
					fail "install ${PKG} and try again"
				fi
			fi
		done
	fi
}


do_template() {
	# print a sample configuration template
	cat <<-EOF
	[mine]
	OS_AUTH_SYSTEM=rackspace
	OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
	OS_TENANT_NAME=USE_KEYRING
	OS_PROJECT_ID=USE_KEYRING
	OS_USERNAME=USE_KEYRING
	OS_PASSWORD=USE_KEYRING
	OS_REGION_NAME=USE_KEYRING
	NOVA_RAX_AUTH=1
	# vim: set ft=dosini :
	EOF
}


do_install() {
	# basic system checks
	do_checks

	# test if packages are installed
	pkg_test

	# test if there already is scripts in our desired location
	echo -n "checking for wrapper script conflict..."
	for SCRIPT in ${SCRIPTS[@]}; do
		if [[ -f ${BIN_PATH}/${SCRIPT} ]]; then
			fail "${BIN_PATH}/${SCRIPT} already exists"
		fi
	done
	pass

	# create isolated python environment
	echo -n "creating isolated python environment ${INSTALL_PATH}..."
	${VIRTUALENV} --no-site-packages ${INSTALL_PATH} &> /dev/null && pass || fail

	# activate the virtual environment
	echo -n "activating virutalenv ${INSTALL_PATH}..."
	. ${INSTALL_PATH}/bin/activate &> /dev/null && pass || fail "could not activate ${INSTALL_PATH}"

	# install pip packages
	echo -n "installing pbr..."
	${INSTALL_PATH}/bin/pip install pbr &> /dev/null && pass || fail
	echo -n "installing python-novaclient..."
	${INSTALL_PATH}/bin/pip install python-novaclient &> /dev/null && pass || fail
	echo -n "installing rackspace-novaclient..."
	${INSTALL_PATH}/bin/pip install rackspace-novaclient &> /dev/null && pass || fail
	echo -n "installing supernova..."
	${INSTALL_PATH}/bin/pip install supernova &> /dev/null && pass || fail
	if [[ ${WITH_KEYRING_HELPER} -eq 1 ]]; then
		echo -n "installing supernova-keyring-helper..."
		${INSTALL_PATH}/bin/pip install ${HELPER_ADD_ON} &> /dev/null && pass || fail
	fi
	echo -n "saving pip freeze output..."
	${INSTALL_PATH}/bin/pip freeze 2>&1 | tee ${INSTALL_PATH}/freeze.$(date +%F_%T).out &> /dev/null && pass || fail

	# deactivate the virtual environment
	echo -n "deactivating virutalenv ${INSTALL_PATH}..."
	deactivate &> /dev/null && pass || fail "could not deactivate ${INSTALL_PATH}"

	# create wrapper scripts
	echo -n "creating wrapper scripts..."
	for SCRIPT in ${SCRIPTS[@]}; do
		cat >> ${BIN_PATH}/${SCRIPT} <<-EOF
		#!/bin/bash
		. ${INSTALL_PATH}/bin/activate
		${INSTALL_PATH}/bin/${SCRIPT} \${@}
		EOF
		chmod +x ${BIN_PATH}/${SCRIPT}
	done
	pass

	echo "${_bld}installation complete${_res}"
}


do_upgrade() {
	# basic system checks
	do_checks

	# test if packages are installed
	pkg_test

	# activate the virtual environment
	echo -n "activating virutalenv ${INSTALL_PATH}..."
	. ${INSTALL_PATH}/bin/activate &> /dev/null && pass || fail "could not activate ${INSTALL_PATH}"

	# upgrade pip packages
	echo -n "updating pbr..."
	${INSTALL_PATH}/bin/pip install --upgrade pbr &> /dev/null && pass || fail
	echo -n "updating python-novaclient..."
	${INSTALL_PATH}/bin/pip install --upgrade python-novaclient &> /dev/null && pass || fail
	echo -n "updating rackspace-novaclient..."
	${INSTALL_PATH}/bin/pip install --upgrade rackspace-novaclient &> /dev/null && pass || fail
	echo -n "updating supernova..."
	${INSTALL_PATH}/bin/pip install --upgrade supernova &> /dev/null && pass || fail
	if [[ ${WITH_KEYRING_HELPER} -eq 1 ]]; then
		echo -n "updating supernova-keyring-helper..."
		${INSTALL_PATH}/bin/pip install --upgrade ${HELPER_ADD_ON} &> /dev/null && pass || fail
	fi
	echo -n "saving pip freeze output..."
	${INSTALL_PATH}/bin/pip freeze 2>&1 | tee ${INSTALL_PATH}/freeze.$(date +%s).out &> /dev/null && pass || fail

	# deactivate the virtual environment
	echo -n "deactivating virutalenv ${INSTALL_PATH}..."
	deactivate &> /dev/null && pass || fail "could not deactivate ${INSTALL_PATH}"

	echo "${_bld}upgrade process complete${_res}"
}


do_remove() {
	# remove installation path
	if [[ -d ${INSTALL_PATH} ]]; then
		echo -n "remove virtualenv directory ${_bld}${INSTALL_PATH}${_res}? [y/N] "; read x
		if [[ "${x}" == "y" ]]; then
			echo -n "removing virtualenv directory..."
			rm -rf ${INSTALL_PATH} && pass || fail
		fi
	fi

	# delete wrapper scripts
	for SCRIPT in ${SCRIPTS[@]}; do
		if [[ -f ${BIN_PATH}/${SCRIPT} ]]; then
			echo -n "remove wrapper script ${_bld}${BIN_PATH}/${SCRIPT}${_res}? [y/N] "; read x
			if [[ "${x}" == "y" ]]; then
				echo -n "removing wrapper script..."
				rm -f ${BIN_PATH}/${SCRIPT} && pass || fail
			fi
		fi
	done

	echo "${_bld}uninstall complete${_res}"
}


do_status() {
	# show virtualenvs
	echo -n "testing directory ${INSTALL_PATH}..."
	if [[ -d ${INSTALL_PATH} ]]; then
		pass
	else
		soft_fail
	fi

	# show executables
	for SCRIPT in ${SCRIPTS[@]}; do
		echo -n "testing executable ${BIN_PATH}/${SCRIPT}..."
		if [[ -x ${BIN_PATH}/${SCRIPT} ]]; then
			pass
		else
			soft_fail
		fi
	done
}


do_help() {
	DESC="${_bld}description${_res}"
	USAGE="${_bld}usage${_res}"
	SUBCOMMAND="${_und}subcommand${_res}"
	SUBCOMMANDS="${_bld}subcommands${_res}"
	NAME=$(basename ${0})
	echo -e "${USAGE}:\t\t${NAME} ${SUBCOMMAND}\n"
	echo -e "${DESC}:\tBootstrap a complete supernova environment using virtualenv.\n"
	echo -e "${SUBCOMMANDS}:\tinstall \tinstall the environment and wrapper scripts"
	echo -e "\t\tupgrade  \tupgrade the pip pacakges in the environment"
	echo -e "\t\tremove   \tremove the environment and wrapper scripts"
	echo -e "\t\ttemplate \tprint a sample configuration template"
	echo -e "\t\tstatus   \tcheck the status of your installation"
	exit 1
}


# start main program

if [[ ${#} -ne 1 ]]; then
	do_help
fi

set_variables

case ${1} in
	"install")			do_install;;
	"upgrade"|"update")		do_upgrade;;
	"remove"|"erase"|"purge")	do_remove;;
	"template")			do_template;;
	"status")			do_status;;
	*)				do_help;;
esac

# vim: ft=sh sw=8 ts=8
